
const fs = require('fs');
const path = require('path');

// Service-specific environment variables
const serviceEnvs = {
  auth: {
    SERVICE_NAME: 'auth-service',
    SERVICE_PORT: '3001',
    DB_NAME: 'ott_auth',
    SERVICE_URL: 'http://localhost:3001',
    FIREBASE_PROJECT_ID: '${FIREBASE_PROJECT_ID}',
    FIREBASE_PRIVATE_KEY: '${FIREBASE_PRIVATE_KEY}',
    FIREBASE_CLIENT_EMAIL: '${FIREBASE_CLIENT_EMAIL}',
    JWT_SECRET: '${JWT_SECRET}',
    JWT_EXPIRES_IN: '${JWT_EXPIRES_IN}'
  },
  user: {
    SERVICE_NAME: 'user-service',
    SERVICE_PORT: '3002',
    DB_NAME: 'ott_users',
    SERVICE_URL: 'http://localhost:3002',
    FIREBASE_PROJECT_ID: '${FIREBASE_PROJECT_ID}',
    FIREBASE_PRIVATE_KEY: '${FIREBASE_PRIVATE_KEY}',
    FIREBASE_CLIENT_EMAIL: '${FIREBASE_CLIENT_EMAIL}'
  },
  content: {
    SERVICE_NAME: 'content-service',
    SERVICE_PORT: '3003',
    DB_NAME: 'ott_content',
    SERVICE_URL: 'http://localhost:3003',
    AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}',
    AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}',
    AWS_REGION: '${AWS_REGION}',
    AWS_S3_BUCKET: '${AWS_S3_BUCKET}',
    AWS_CLOUDFRONT_DOMAIN: '${AWS_CLOUDFRONT_DOMAIN}',
    AWS_CLOUDFRONT_PRIVATE_KEY: '${AWS_CLOUDFRONT_PRIVATE_KEY}',
    AWS_CLOUDFRONT_KEY_PAIR_ID: '${AWS_CLOUDFRONT_KEY_PAIR_ID}',
    AWS_MEDIACONVERT_ENDPOINT: '${AWS_MEDIACONVERT_ENDPOINT}',
    AWS_MEDIACONVERT_ROLE: '${AWS_MEDIACONVERT_ROLE}'
  },
  streaming: {
    SERVICE_NAME: 'streaming-service',
    SERVICE_PORT: '3004',
    DB_NAME: 'ott_streaming',
    SERVICE_URL: 'http://localhost:3004',
    AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}',
    AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}',
    AWS_REGION: '${AWS_REGION}',
    AWS_S3_BUCKET: '${AWS_S3_BUCKET}',
    AWS_CLOUDFRONT_DOMAIN: '${AWS_CLOUDFRONT_DOMAIN}',
    AWS_CLOUDFRONT_PRIVATE_KEY: '${AWS_CLOUDFRONT_PRIVATE_KEY}',
    AWS_CLOUDFRONT_KEY_PAIR_ID: '${AWS_CLOUDFRONT_KEY_PAIR_ID}'
  },
  recommendation: {
    SERVICE_NAME: 'recommendation-service',
    SERVICE_PORT: '3005',
    DB_NAME: 'ott_recommendations',
    SERVICE_URL: 'http://localhost:3005'
  },
  admin: {
    SERVICE_NAME: 'admin-service',
    SERVICE_PORT: '3006',
    DB_NAME: 'ott_admin',
    SERVICE_URL: 'http://localhost:3006',
    FIREBASE_PROJECT_ID: '${FIREBASE_PROJECT_ID}',
    FIREBASE_PRIVATE_KEY: '${FIREBASE_PRIVATE_KEY}',
    FIREBASE_CLIENT_EMAIL: '${FIREBASE_CLIENT_EMAIL}',
    AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}',
    AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}',
    AWS_REGION: '${AWS_REGION}',
    AWS_S3_BUCKET: '${AWS_S3_BUCKET}'
  },
  common: {
    SERVICE_NAME: 'common-service',
    SERVICE_PORT: '3007',
    DB_NAME: 'ott_common',
    SERVICE_URL: 'http://localhost:3007',
    AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}',
    AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}',
    AWS_REGION: '${AWS_REGION}',
    AWS_S3_BUCKET: '${AWS_S3_BUCKET}'
  }
};

// Common environment variables for all services
const commonEnv = {
  NODE_ENV: 'development',
  DB_HOST: '${DB_HOST}',
  DB_PORT: '${DB_PORT}',
  DB_USER: '${DB_USER}',
  DB_PASSWORD: '${DB_PASSWORD}',
  FRONTEND_URL: '${FRONTEND_URL}',
  GATEWAY_URL: 'http://localhost:5000'
};

// Function to generate .env file content
const generateEnvContent = (serviceVars) => {
  const allVars = { ...commonEnv, ...serviceVars };
  let content = `# ${serviceVars.SERVICE_NAME.toUpperCase()} Environment Variables\n`;
  content += `# Auto-generated by setup-env.js\n\n`;
  
  Object.entries(allVars).forEach(([key, value]) => {
    content += `${key}=${value}\n`;
  });
  
  return content;
};

// Function to create .env file for a service
const createServiceEnv = (serviceName, serviceVars) => {
  const servicePath = path.join(__dirname, '..', 'services', serviceName);
  
  if (!fs.existsSync(servicePath)) {
    console.log(`⚠️  Service directory not found: ${servicePath}`);
    return;
  }
  
  const envPath = path.join(servicePath, '.env');
  const envContent = generateEnvContent(serviceVars);
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log(`✅ Created .env for ${serviceName} service`);
  } catch (error) {
    console.error(`❌ Failed to create .env for ${serviceName}:`, error.message);
  }
};

// Function to create gateway .env file
const createGatewayEnv = () => {
  const gatewayPath = path.join(__dirname, '..', 'gateway');
  
  if (!fs.existsSync(gatewayPath)) {
    console.log(`⚠️  Gateway directory not found: ${gatewayPath}`);
    return;
  }
  
  const gatewayEnv = {
    SERVICE_NAME: 'api-gateway',
    GATEWAY_PORT: '5000',
    NODE_ENV: '${NODE_ENV}',
    FRONTEND_URL: '${FRONTEND_URL}',
    AUTH_SERVICE_URL: 'http://localhost:3001',
    USER_SERVICE_URL: 'http://localhost:3002',
    CONTENT_SERVICE_URL: 'http://localhost:3003',
    STREAMING_SERVICE_URL: 'http://localhost:3004',
    RECOMMENDATION_SERVICE_URL: 'http://localhost:3005',
    ADMIN_SERVICE_URL: 'http://localhost:3006',
    COMMON_SERVICE_URL: 'http://localhost:3007'
  };
  
  const envPath = path.join(gatewayPath, '.env');
  const envContent = generateEnvContent(gatewayEnv);
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log(`✅ Created .env for gateway`);
  } catch (error) {
    console.error(`❌ Failed to create .env for gateway:`, error.message);
  }
};

// Main execution
console.log('🔧 Setting up environment files for all services...\n');

// Create service environment files
Object.entries(serviceEnvs).forEach(([serviceName, serviceVars]) => {
  createServiceEnv(serviceName, serviceVars);
});

// Create gateway environment file
createGatewayEnv();

console.log('\n🎉 Environment setup completed!');
console.log('\n📝 Next steps:');
console.log('1. Update the main .env file with your actual values');
console.log('2. Each service will reference variables from the main .env');
console.log('3. Service-specific variables are already configured');
console.log('\n💡 Note: Variables marked with ${} will be resolved from your main .env file');
